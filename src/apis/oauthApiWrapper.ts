import { OAuthApi, PlayerResponse } from "../generated";
import { BaseApiWrapper } from "./baseApiWrapper";
import { httpErrorHandler } from "../utilities/httpErrorHandler";
import { GetPlayerByExternalIdRequest, VerifyOAuthTokenRequest } from "../models";

@httpErrorHandler
export class OAuthApiWrapper extends BaseApiWrapper<OAuthApi> {
    constructor(accessToken: string, basePath?: string) {
        super(OAuthApi, accessToken, basePath);
    }

    /**
     * Verifies the token generated by OAuth provider and retrieves a corresponding player.
     */
    public async verifyToken(request: VerifyOAuthTokenRequest): Promise<PlayerResponse> {
        return await this.api.verifyOAuthToken(request.provider, { token: request.token });
    }

    /**
     * Retrieves the player based on his id in the external provider system.
     */
    public async get(request: GetPlayerByExternalIdRequest) {
        return await this.api.getPlayerByExternalId(request.provider, request.externalId);
    }
}
